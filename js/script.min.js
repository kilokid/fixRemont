!function(e){var t={};function r(n){if(t[n])return t[n].exports;var l=t[n]={i:n,l:!1,exports:{}};return e[n].call(l.exports,l,l.exports,r),l.l=!0,l.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)r.d(n,l,function(t){return e[t]}.bind(null,l));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);(()=>{const e=document.querySelector(".slider"),t=e.querySelector(".slider-content"),r=e.querySelectorAll(".slide"),n=e.querySelector(".slide"),l=e.querySelectorAll(".slide-description"),o=e.querySelector(".btn-prev"),i=e.querySelector(".btn-next");let s=1,c=0;const a=()=>{document.body.clientWidth<=1200?(t.style.width=100*r.length+"%",t.style.transform=`translateX(-${n.getBoundingClientRect().width}px)`):t.style.width=50*r.length+"%"};a();window.addEventListener("resize",function(e){let t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100;return function(n){t&&clearTimeout(t),t=setTimeout(e,r,n)}}(a,150));const u=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;e>=r.length?(s=0,e=s):e<0&&(s=r.length-1,e=s),r[e].classList.add("slide-active"),l[e].classList.add("slide-description-active")},d=()=>{r.forEach(e=>e.classList.remove("slide-active")),l.forEach(e=>e.classList.remove("slide-description-active"))};d(),u(s),i.addEventListener("click",()=>{const e=n.getBoundingClientRect().width;d(),u(++s),c=document.body.clientWidth<=1200?e*s*-1:e*s*-1+e,t.style.transform=`translateX(${c}px)`}),o.addEventListener("click",()=>{const e=n.getBoundingClientRect().width;d(),u(--s),c=document.body.clientWidth<=1200?e*s*-1:e*s*-1+e,t.style.transform=`translateX(${c}px)`})})(),document.querySelectorAll('a[href^="#"]:not(a[href="#"])').forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const r=e.getAttribute("href").slice(1);document.getElementById(r).scrollIntoView({behavior:"smooth"})})}),(()=>{const e=document.querySelector(".form-content"),t=document.querySelector(".successfuly"),r=e.querySelector('input[type="email"]'),n=e.querySelector(".email"),l=e.querySelector('input[name="name"]'),o=e.querySelector(".btn-submit"),i=/^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@(([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{2,})$/iu;o.addEventListener("click",n=>(n.preventDefault(),""===r.value&&""===l.value?(r.classList.add("input-error"),void l.classList.add("input-error")):""===r.value?(r.classList.add("input-error"),void l.classList.remove("input-error")):""===l.value?(l.classList.add("input-error"),void r.classList.remove("input-error")):(t.style.display="flex",void(e.style.display="none")))),r.addEventListener("input",()=>{var e;e=r.value,i.test(e)?(r.classList.remove("input-error"),n.classList.remove("label-error")):(r.classList.add("input-error"),n.classList.add("label-error"))}),document.addEventListener("input",e=>{const t=e.target;t.closest("#form-name")||"Имя и фамилия*"===t.placeholder?(t.value=t.value.replace(/[^а-яё ]+$/gi,""),t.classList.remove("input-error")):""===t.value&&t.classList.add("input-error"),(t.closest("#form-email")||"E-mail адрес*"===t.placeholder)&&(t.value=t.value.replace(/[^a-z@. ]+$/gi,"")),(t.closest("#form-phone")||"Телефон"===t.placeholder)&&(t.value=t.value.replace(/\D/gi,"").substr(0,11))})})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,